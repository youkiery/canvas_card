{"remainingRequest":"/home/doi7/Downloads/universal/universal/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/home/doi7/Downloads/universal/universal/node_modules/angular-in-memory-web-api/delay-response.js","dependencies":[{"path":"/home/doi7/Downloads/universal/universal/node_modules/angular-in-memory-web-api/delay-response.js","mtime":1521780766000},{"path":"/home/doi7/Downloads/universal/universal/node_modules/cache-loader/dist/cjs.js","mtime":1531468360196},{"path":"/home/doi7/Downloads/universal/universal/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["import { Observable } from 'rxjs';\n// Replaces use of RxJS delay. See v0.5.4.\n/** adds specified delay (in ms) to both next and error channels of the response observable */\nexport function delayResponse(response$, delayMs) {\n    return new Observable(function (observer) {\n        var completePending = false;\n        var nextPending = false;\n        var subscription = response$.subscribe(function (value) {\n            nextPending = true;\n            setTimeout(function () {\n                observer.next(value);\n                if (completePending) {\n                    observer.complete();\n                }\n            }, delayMs);\n        }, function (error) { return setTimeout(function () { return observer.error(error); }, delayMs); }, function () {\n            completePending = true;\n            if (!nextPending) {\n                observer.complete();\n            }\n        });\n        return function () {\n            return subscription.unsubscribe();\n        };\n    });\n}\n//# sourceMappingURL=delay-response.js.map",null]}